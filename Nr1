<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Random Spotify Playlist Player</title>
</head>
<body>
    <h1>Random Spotify Playlist Player</h1>
    <button id="play">Play Random Song</button>

    <script>
        const clientId = '4126d92b872c432e9303c5eb1ecbfe32';
        const redirectUri = window.location.origin; // Använd den aktuella sidan som redirect URI
        const scopes = 'user-read-playback-state user-modify-playback-state';
        let codeVerifier = '';

        // Generera PKCE Code Verifier
        function generateCodeVerifier(length) {
            var text = '';
            var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            for (var i = 0; i < length; i++) {
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return text;
        }

        // Generera PKCE Code Challenge
        function generateCodeChallenge(codeVerifier) {
            return crypto.subtle.digest('SHA-256', new TextEncoder().encode(codeVerifier)).then(buffer => {
                return btoa(String.fromCharCode(...new Uint8Array(buffer)))
                    .replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
            });
        }

        // Starta autentiseringsprocessen
        function authorize() {
            codeVerifier = generateCodeVerifier(128);
            generateCodeChallenge(codeVerifier).then(codeChallenge => {
                const url = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${redirectUri}&code_challenge_method=S256&code_challenge=${codeChallenge}&scope=${scopes}`;
                window.location = url;
            });
        }

        // Hämta Access Token
        function getAccessToken(code) {
            const body = new URLSearchParams({
                grant_type: 'authorization_code',
                code: code,
                redirect_uri: redirectUri,
                client_id: clientId,
                code_verifier: codeVerifier
            });

            return fetch('https://accounts.spotify.com/api/token', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: body
            }).then(response => response.json());
        }

        // Spela en slumpmässig låt
        function playRandomTrack(accessToken) {
            fetch('https://api.spotify.com/v1/playlists/5mQVbkcILLiU2aqVOplsMy/tracks', {
                headers: {
                    Authorization: `Bearer ${accessToken}`
                }
            })
            .then(response => response.json())
            .then(data => {
                const tracks = data.items;
                const randomTrackUri = tracks[Math.floor(Math.random() * tracks.length)].track.uri;

                // Spela slumpmässig låt
                fetch('https://api.spotify.com/v1/me/player/play', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${accessToken}`
                    },
                    body: JSON.stringify({ uris: [randomTrackUri] })
                });
            });
        }

        // Kontrollera om användaren kommit tillbaka med en auth-code
        const code = new URLSearchParams(window.location.search).get('code');
        if (code) {
            getAccessToken(code).then(data => {
                const accessToken = data.access_token;
                document.getElementById('play').addEventListener('click', () => {
                    playRandomTrack(accessToken);
                });
            });
        } else {
            authorize(); // Starta autentiseringen om ingen auth-code finns
        }
    </script>
</body>
</html>
